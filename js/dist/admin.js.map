{"version":3,"sources":["webpack://@tpokorra/post-notification/webpack/bootstrap","webpack://@tpokorra/post-notification/external \"flarum.core.compat['app']\"","webpack://@tpokorra/post-notification/./src/admin/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","translationPrefix","settingsPrefix","app","initializers","add","extensionData","registerSetting","label","translator","trans","setting","type","default"],"mappings":"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","file":"admin.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = flarum.core.compat['app'];","import app from 'flarum/app';\n\nconst translationPrefix = 'tpokorra-post-notification.admin.settings.';\nconst settingsPrefix = 'PostNotification.';\n\n\napp.initializers.add('tpokorra-post-notification', () => {\n    app.extensionData\n        .for('tpokorra-post-notification')\n\n        .registerSetting({\n            label: app.translator.trans(translationPrefix + 'recipients.post_approval.to'),\n            setting: settingsPrefix + 'recipients.post_approval.to',\n            type: 'text',\n        })\n        .registerSetting({\n            label: app.translator.trans(translationPrefix + 'recipients.new_discussion.to'),\n            setting: settingsPrefix + 'recipients.new_discussion.to',\n            type: 'text',\n        })\n        .registerSetting({\n            label: app.translator.trans(translationPrefix + 'recipients.new_discussion.bcc'),\n            setting: settingsPrefix + 'recipients.new_discussion.bcc',\n            type: 'text',\n        })\n        .registerSetting({\n            label: app.translator.trans(translationPrefix + 'recipients.new_post.to'),\n            setting: settingsPrefix + 'recipients.new_post.to',\n            type: 'text',\n        })\n        .registerSetting({\n            label: app.translator.trans(translationPrefix + 'recipients.new_post.bcc'),\n            setting: settingsPrefix + 'recipients.new_post.bcc',\n            type: 'text',\n        })\n        .registerSetting({\n            label: app.translator.trans(translationPrefix + 'recipients.revised_post.to'),\n            setting: settingsPrefix + 'recipients.revised_post.to',\n            type: 'text',\n        })\n        .registerSetting({\n            label: app.translator.trans(translationPrefix + 'recipients.revised_post.bcc'),\n            setting: settingsPrefix + 'recipients.revised_post.bcc',\n            type: 'text',\n        })\n        .registerSetting({\n            label: app.translator.trans(translationPrefix + 'post_approval'),\n            setting: settingsPrefix + 'post_approval',\n            type: 'text',\n            default: 'A new post by %s needs to be approved:',\n        })\n        .registerSetting({\n            label: app.translator.trans(translationPrefix + 'new_discussion'),\n            setting: settingsPrefix + 'new_discussion',\n            type: 'text',\n            default: 'A new discussion has been started by %s:',\n        })\n        .registerSetting({\n            label: app.translator.trans(translationPrefix + 'new_post'),\n            setting: settingsPrefix + 'new_post',\n            type: 'text',\n            default: 'A new message has been posted by %s:',\n        })\n        .registerSetting({\n            label: app.translator.trans(translationPrefix + 'revised_post'),\n            setting: settingsPrefix + 'revised_post',\n            type: 'text',\n            default: 'A message has been revised by %s:',\n        });\n});\n"],"sourceRoot":""}